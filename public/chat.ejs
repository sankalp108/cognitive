<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <%- include('./partials/csslinks') %>
</head>

<body>
  <%- include('./partials/header') %>

    <section class="contact-list-section h-100">
      <div class="container h-100">
        <div class="chat-container">
          <div class="chat-box" id="chat-box"></div>
          <div class="input-container">
            <textarea type="text" rows="3" id="user-input" placeholder="Type your message..."></textarea>
            <button id="recordButton" onclick="startRecording()">Record</button>
            <button id="stopRecordButton" onclick="stopRecording()" style="display: none;">Stop Recording</button>
            <button onclick="sendMessage()">Send</button>
          </div>
        </div>
      </div>
    </section>

    <%- include('./partials/footer') %>

      <%- include('./partials/scriptlinks') %>
</body>

</html>

<script>

  // Voice Message
  // Initialize variables
  var recognition = null; // SpeechRecognition instance
  var recordedMessage = ''; // Recorded message

  function sendMessage() {
    const userInput = document.getElementById('user-input');
    const message = userInput.value.trim();
    if (!message) return;

    const chatBox = document.getElementById('chat-box');
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', 'user-message');
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);

    // Scroll chat box to bottom
    chatBox.scrollTop = chatBox.scrollHeight;

    // Clear user input
    userInput.value = '';

    // Send user message to API and get response
    fetchAPIResponse(message);
  }

  function receiveBotMessage(message) {
    const chatBox = document.getElementById('chat-box');
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', 'bot-message');
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);

    // Scroll chat box to bottom
    chatBox.scrollTop = chatBox.scrollHeight;
  }

  function fetchAPIResponse(message) {
    fetch('http://localhost:8090/api/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ message })
    })
      .then(response => response.json())
      .then(data => {
        const botResponse = data.response;
        receiveBotMessage(botResponse);
      })
      .catch(error => {
        console.error('Error fetching API response:', error);
        receiveBotMessage('Sorry, something went wrong. Please try again later.');
      });
  }

  // Function to start recording speech
  function startRecording() {
    // Show cancel button and hide record button
    document.getElementById('recordButton').style.display = 'none';
    document.getElementById('stopRecordButton').style.display = 'inline-block';

    // Check if SpeechRecognition API is supported by the browser
    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
      // Create a new instance of SpeechRecognition if not already initialized
      if (!recognition) {
        recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.lang = 'en-US'; // Set language to English (United States)
        recognition.continuous = true; // Keep listening until stopped
      }

      // Start speech recognition
      recognition.start();

      // Event fired when speech is recognized
      recognition.onresult = function (event) {
        console.log('Speech recognition onresult', recordedMessage);
        // Get the recognized text from the event and append to recorded message
        recordedMessage += event.results[event.results.length - 1][0].transcript + ' ';
        document.getElementById('user-input').value = recordedMessage.trim();
      };

      // Event fired when recognition ends (e.g., after speech is stopped)
      recognition.onend = function () {
        console.log('Speech recognition ended', recordedMessage);
        // Hide cancel button and show record button
        document.getElementById('recordButton').style.display = 'inline-block';
        document.getElementById('stopRecordButton').style.display = 'none';
      };
    } else {
      alert('Speech recognition is not supported by your browser');
    }
  }

  // Function to cancel recording
  function stopRecording() {
    if (recognition) {
      // Stop speech recognition
      recognition.stop();

      // Reset recorded message
      recordedMessage = '';

      // Hide cancel button and show record button
      document.getElementById('recordButton').style.display = 'inline-block';
      document.getElementById('stopRecordButton').style.display = 'none';

      console.log('Recording canceled');
    }
  }

</script>

<style>
  .chat-container {
    width: 100%;
    margin: 20px auto;
    border: 1px solid #ccc;
    border-radius: 5px;
    overflow: hidden;
  }

  .chat-box {
    height: 500px;
    overflow-y: scroll;
    padding: 10px;
  }

  .message {
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
    background-color: #f0f0f0;
  }

  .user-message {
    background-color: #b481564a;
    text-align: right;
  }

  .bot-message {
    background-color: #fff;
    text-align: left;
  }

  .input-container {
    display: flex;
    padding: 10px;
    align-items: center;
  }

  input[type="text"] {
    flex: 1;
    padding: 5px 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  button {
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
  }

  #user-input {
    width: 100%;
    border: 1px solid #D9D9D9 !important;
    border-radius: 10px;
    padding: 15px 15px;
  }
  #user-input:focus-visible{
    outline: none;
  }
  .input-container button {
    margin-left: 15px;
    border: 1px solid #B48156;
    background: #B48156;
    color: #fff;
    padding: 10px 15px;
    display: inline-block;
    border-radius: 10px;
    transition: 0.5s all ease;
    font-size: 13px;
  }

  .input-container button:hover {
    border: 1px solid #B48156;
    background: transparent;
    color: #B48156;
  }

  @media (max-width: 992px) {
    .input-container {
      display: block;
      text-align: center;
    }
  }
</style>